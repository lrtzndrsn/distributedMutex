// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: distributed_mutex.proto

package distributed_mutex

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CallElectionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallElectionMessage) Reset() {
	*x = CallElectionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distributed_mutex_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallElectionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallElectionMessage) ProtoMessage() {}

func (x *CallElectionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_distributed_mutex_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallElectionMessage.ProtoReflect.Descriptor instead.
func (*CallElectionMessage) Descriptor() ([]byte, []int) {
	return file_distributed_mutex_proto_rawDescGZIP(), []int{0}
}

type CallElectionResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallElectionResponseMessage) Reset() {
	*x = CallElectionResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distributed_mutex_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallElectionResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallElectionResponseMessage) ProtoMessage() {}

func (x *CallElectionResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_distributed_mutex_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallElectionResponseMessage.ProtoReflect.Descriptor instead.
func (*CallElectionResponseMessage) Descriptor() ([]byte, []int) {
	return file_distributed_mutex_proto_rawDescGZIP(), []int{1}
}

type AssertCoordinatorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port string `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *AssertCoordinatorMessage) Reset() {
	*x = AssertCoordinatorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distributed_mutex_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertCoordinatorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertCoordinatorMessage) ProtoMessage() {}

func (x *AssertCoordinatorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_distributed_mutex_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertCoordinatorMessage.ProtoReflect.Descriptor instead.
func (*AssertCoordinatorMessage) Descriptor() ([]byte, []int) {
	return file_distributed_mutex_proto_rawDescGZIP(), []int{2}
}

func (x *AssertCoordinatorMessage) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type AssertCoordinatorResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port string `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *AssertCoordinatorResponseMessage) Reset() {
	*x = AssertCoordinatorResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distributed_mutex_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertCoordinatorResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertCoordinatorResponseMessage) ProtoMessage() {}

func (x *AssertCoordinatorResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_distributed_mutex_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertCoordinatorResponseMessage.ProtoReflect.Descriptor instead.
func (*AssertCoordinatorResponseMessage) Descriptor() ([]byte, []int) {
	return file_distributed_mutex_proto_rawDescGZIP(), []int{3}
}

func (x *AssertCoordinatorResponseMessage) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type ResourceRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port string `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ResourceRequestMessage) Reset() {
	*x = ResourceRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distributed_mutex_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequestMessage) ProtoMessage() {}

func (x *ResourceRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_distributed_mutex_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequestMessage.ProtoReflect.Descriptor instead.
func (*ResourceRequestMessage) Descriptor() ([]byte, []int) {
	return file_distributed_mutex_proto_rawDescGZIP(), []int{4}
}

func (x *ResourceRequestMessage) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type ResourceRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRequestGranted bool `protobuf:"varint,1,opt,name=is_request_granted,json=isRequestGranted,proto3" json:"is_request_granted,omitempty"`
}

func (x *ResourceRequestResponse) Reset() {
	*x = ResourceRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distributed_mutex_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequestResponse) ProtoMessage() {}

func (x *ResourceRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_distributed_mutex_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequestResponse.ProtoReflect.Descriptor instead.
func (*ResourceRequestResponse) Descriptor() ([]byte, []int) {
	return file_distributed_mutex_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceRequestResponse) GetIsRequestGranted() bool {
	if x != nil {
		return x.IsRequestGranted
	}
	return false
}

var File_distributed_mutex_proto protoreflect.FileDescriptor

var file_distributed_mutex_proto_rawDesc = []byte{
	0x0a, 0x17, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x75,
	0x74, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x78, 0x22, 0x15, 0x0a, 0x13,
	0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x2e, 0x0a, 0x18, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x36, 0x0a, 0x20, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x2c, 0x0a, 0x16, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x47, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x32, 0xdf, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x66, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x78, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2e, 0x2e, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x78,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x75, 0x0a, 0x11,
	0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x2b, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x75, 0x74, 0x65, 0x78, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x33,
	0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x75, 0x74,
	0x65, 0x78, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x29, 0x2e, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x78,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2a, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x18, 0x5a, 0x16, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x78, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_distributed_mutex_proto_rawDescOnce sync.Once
	file_distributed_mutex_proto_rawDescData = file_distributed_mutex_proto_rawDesc
)

func file_distributed_mutex_proto_rawDescGZIP() []byte {
	file_distributed_mutex_proto_rawDescOnce.Do(func() {
		file_distributed_mutex_proto_rawDescData = protoimpl.X.CompressGZIP(file_distributed_mutex_proto_rawDescData)
	})
	return file_distributed_mutex_proto_rawDescData
}

var file_distributed_mutex_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_distributed_mutex_proto_goTypes = []interface{}{
	(*CallElectionMessage)(nil),              // 0: distributed_mutex.CallElectionMessage
	(*CallElectionResponseMessage)(nil),      // 1: distributed_mutex.CallElectionResponseMessage
	(*AssertCoordinatorMessage)(nil),         // 2: distributed_mutex.AssertCoordinatorMessage
	(*AssertCoordinatorResponseMessage)(nil), // 3: distributed_mutex.AssertCoordinatorResponseMessage
	(*ResourceRequestMessage)(nil),           // 4: distributed_mutex.ResourceRequestMessage
	(*ResourceRequestResponse)(nil),          // 5: distributed_mutex.ResourceRequestResponse
}
var file_distributed_mutex_proto_depIdxs = []int32{
	0, // 0: distributed_mutex.ResourceAccess.CallElection:input_type -> distributed_mutex.CallElectionMessage
	2, // 1: distributed_mutex.ResourceAccess.AssertCoordinator:input_type -> distributed_mutex.AssertCoordinatorMessage
	4, // 2: distributed_mutex.ResourceAccess.RequestResourceAccess:input_type -> distributed_mutex.ResourceRequestMessage
	1, // 3: distributed_mutex.ResourceAccess.CallElection:output_type -> distributed_mutex.CallElectionResponseMessage
	3, // 4: distributed_mutex.ResourceAccess.AssertCoordinator:output_type -> distributed_mutex.AssertCoordinatorResponseMessage
	5, // 5: distributed_mutex.ResourceAccess.RequestResourceAccess:output_type -> distributed_mutex.ResourceRequestResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_distributed_mutex_proto_init() }
func file_distributed_mutex_proto_init() {
	if File_distributed_mutex_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_distributed_mutex_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallElectionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distributed_mutex_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallElectionResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distributed_mutex_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertCoordinatorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distributed_mutex_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertCoordinatorResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distributed_mutex_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distributed_mutex_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_distributed_mutex_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_distributed_mutex_proto_goTypes,
		DependencyIndexes: file_distributed_mutex_proto_depIdxs,
		MessageInfos:      file_distributed_mutex_proto_msgTypes,
	}.Build()
	File_distributed_mutex_proto = out.File
	file_distributed_mutex_proto_rawDesc = nil
	file_distributed_mutex_proto_goTypes = nil
	file_distributed_mutex_proto_depIdxs = nil
}
