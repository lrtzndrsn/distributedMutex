// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: distributed_mutex.proto

package distributed_mutex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourceAccess_CallElection_FullMethodName          = "/distributed_mutex.ResourceAccess/CallElection"
	ResourceAccess_AssertCoordinator_FullMethodName     = "/distributed_mutex.ResourceAccess/AssertCoordinator"
	ResourceAccess_RequestResourceAccess_FullMethodName = "/distributed_mutex.ResourceAccess/RequestResourceAccess"
)

// ResourceAccessClient is the client API for ResourceAccess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceAccessClient interface {
	CallElection(ctx context.Context, in *CallElectionMessage, opts ...grpc.CallOption) (*CallElectionResponseMessage, error)
	AssertCoordinator(ctx context.Context, in *AssertCoordinatorMessage, opts ...grpc.CallOption) (*AssertCoordinatorResponseMessage, error)
	RequestResourceAccess(ctx context.Context, in *ResourceRequestMessage, opts ...grpc.CallOption) (*ResourceRequestResponse, error)
}

type resourceAccessClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceAccessClient(cc grpc.ClientConnInterface) ResourceAccessClient {
	return &resourceAccessClient{cc}
}

func (c *resourceAccessClient) CallElection(ctx context.Context, in *CallElectionMessage, opts ...grpc.CallOption) (*CallElectionResponseMessage, error) {
	out := new(CallElectionResponseMessage)
	err := c.cc.Invoke(ctx, ResourceAccess_CallElection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAccessClient) AssertCoordinator(ctx context.Context, in *AssertCoordinatorMessage, opts ...grpc.CallOption) (*AssertCoordinatorResponseMessage, error) {
	out := new(AssertCoordinatorResponseMessage)
	err := c.cc.Invoke(ctx, ResourceAccess_AssertCoordinator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAccessClient) RequestResourceAccess(ctx context.Context, in *ResourceRequestMessage, opts ...grpc.CallOption) (*ResourceRequestResponse, error) {
	out := new(ResourceRequestResponse)
	err := c.cc.Invoke(ctx, ResourceAccess_RequestResourceAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceAccessServer is the server API for ResourceAccess service.
// All implementations must embed UnimplementedResourceAccessServer
// for forward compatibility
type ResourceAccessServer interface {
	CallElection(context.Context, *CallElectionMessage) (*CallElectionResponseMessage, error)
	AssertCoordinator(context.Context, *AssertCoordinatorMessage) (*AssertCoordinatorResponseMessage, error)
	RequestResourceAccess(context.Context, *ResourceRequestMessage) (*ResourceRequestResponse, error)
	mustEmbedUnimplementedResourceAccessServer()
}

// UnimplementedResourceAccessServer must be embedded to have forward compatible implementations.
type UnimplementedResourceAccessServer struct {
}

func (UnimplementedResourceAccessServer) CallElection(context.Context, *CallElectionMessage) (*CallElectionResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallElection not implemented")
}
func (UnimplementedResourceAccessServer) AssertCoordinator(context.Context, *AssertCoordinatorMessage) (*AssertCoordinatorResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssertCoordinator not implemented")
}
func (UnimplementedResourceAccessServer) RequestResourceAccess(context.Context, *ResourceRequestMessage) (*ResourceRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestResourceAccess not implemented")
}
func (UnimplementedResourceAccessServer) mustEmbedUnimplementedResourceAccessServer() {}

// UnsafeResourceAccessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceAccessServer will
// result in compilation errors.
type UnsafeResourceAccessServer interface {
	mustEmbedUnimplementedResourceAccessServer()
}

func RegisterResourceAccessServer(s grpc.ServiceRegistrar, srv ResourceAccessServer) {
	s.RegisterService(&ResourceAccess_ServiceDesc, srv)
}

func _ResourceAccess_CallElection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallElectionMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAccessServer).CallElection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceAccess_CallElection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAccessServer).CallElection(ctx, req.(*CallElectionMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAccess_AssertCoordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssertCoordinatorMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAccessServer).AssertCoordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceAccess_AssertCoordinator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAccessServer).AssertCoordinator(ctx, req.(*AssertCoordinatorMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAccess_RequestResourceAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAccessServer).RequestResourceAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceAccess_RequestResourceAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAccessServer).RequestResourceAccess(ctx, req.(*ResourceRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceAccess_ServiceDesc is the grpc.ServiceDesc for ResourceAccess service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceAccess_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distributed_mutex.ResourceAccess",
	HandlerType: (*ResourceAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallElection",
			Handler:    _ResourceAccess_CallElection_Handler,
		},
		{
			MethodName: "AssertCoordinator",
			Handler:    _ResourceAccess_AssertCoordinator_Handler,
		},
		{
			MethodName: "RequestResourceAccess",
			Handler:    _ResourceAccess_RequestResourceAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distributed_mutex.proto",
}
